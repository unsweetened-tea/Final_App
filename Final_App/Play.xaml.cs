using Microsoft.Maui.Layouts;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Compatibility;
using System.Collections.ObjectModel;


namespace Final_App;

public partial class Play : ContentPage
{
    public string difficulty = "";
    public string selectedCategory = "family";
    public int questionsRemaining = 3;
   
    public string input = "";

    public string[] categories = {"family", "food", "favorites", "travel", "greetings" };
    Dictionary<(string, string), List<Question>> questions = new Dictionary<(string, string), List<Question>>();

    private int numCategories = 5;

    Question currentQuestion = new Question();

    //public ObservableCollection<Weapon> weaponsUsed;

    //public ObservableCollection<Skin> skins;

    // ObservableCollection<Weapon> weapons;

    public Play()
	{
        
        InitializeComponent();
        loadQuestions();
        createWordbankGrid();


    }

    public void difficultyToggle()
    {
        easy.IsVisible = !easy.IsVisible;
        medium.IsVisible = !medium.IsVisible;
        hard.IsVisible = !hard.IsVisible;
    }

    public void answersToggle()
    {
        //responses.IsVisible = !responses.IsVisible;
        bank.IsVisible = !bank.IsVisible;
    }

    private void easy_Clicked(object sender, EventArgs e)
    {
        difficultyToggle();
        difficulty = "easy";
        fillWordbank();
        answersToggle();
        
    }

    private void medium_Clicked(object sender, EventArgs e)
    {
        difficultyToggle();
        difficulty = "medium";
        fillWordbank();
        answersToggle();
        
    }

    private void hard_Clicked(object sender, EventArgs e)
    {
        difficultyToggle();
        difficulty = "hard";
        fillWordbank();
        answersToggle();
        
    }



    private void answer_1_Clicked(object sender, EventArgs e)
    {
        // check if answer is right

        // check if there are questions left
        if (questionsRemaining > 0) 
        {
            difficultyToggle();
            answersToggle();
        }
    }

    private void answer_2_Clicked(object sender, EventArgs e)
    {
        // check if answer is right

        // check if there are questions left
        if (questionsRemaining > 0)
        {
            difficultyToggle();
            answersToggle();
        }
    }

    private void answer_3_Clicked(object sender, EventArgs e)
    {
        // check if answer is right

        // check if there are questions left
        if (questionsRemaining > 0)
        {
            difficultyToggle();
            answersToggle();
        }
    }

    private void answer_4_Clicked(object sender, EventArgs e)
    {
        // check if answer is right

        // check if there are questions left
        if (questionsRemaining > 0)
        {
            difficultyToggle();
            answersToggle();
        }
    }

    public void createWordbankGrid()
    {
        bank.IsVisible = false;

        for(int x = 0; x < 2; x ++)
        {
            bank.AddRowDefinition(new RowDefinition());
        }

        for (int y = 0; y < 10; y++)
        {
            bank.AddColumnDefinition(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star )}); ;
        }


        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                var button = new Button
                {
                    Text = "",
                    BackgroundColor = Colors.Blue,
                    FontSize = 20,
                    MaximumHeightRequest = 100,
                    MaximumWidthRequest = 150,
                    TextColor = Colors.Black,
                    Background = Colors.Transparent,
                    BorderColor = Colors.Transparent,

                };
                button.Clicked += Button_Clicked;
                bank.Add(button, j, i);
            }
        }

    }

    public void loadQuestions()
    {


        //base code generated by chatgpt
        string familyPath = "C:\\Users\\leogo\\source\\repos\\Final_App\\Final_App\\familyQuestions.txt";

        // Specify the string to search for
        string easybreak = "EASYBREAK";
        string medbreak = "MEDBREAK";
        string hardbreak = "HARDBREAK";


        // read the contents of the file
        //for (int i = 0; i < numCategories; i++)
        //{
        using (StreamReader reader = new StreamReader(familyPath))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                // Check for the first string
                if (line.Contains(easybreak))
                {

                    questions.Add((selectedCategory, "easy"), new List<Question>());

                    while ((line = reader.ReadLine()) != null)
                    {

                        if (line.Contains(medbreak))
                        {

                            questions.Add((selectedCategory, "medium"), new List<Question>());

                            while ((line = reader.ReadLine()) != null)
                            {

                                if (line.Contains(hardbreak))
                                {

                                    questions.Add((selectedCategory, "hard"), new List<Question>());

                                    while ((line = reader.ReadLine()) != null)
                                    {
                                        questions[("family", "hard")].Add(new Question("family", "hard",
                                            line, reader.ReadLine()));
                                    }

                                    break;
                                }

                                questions[("family", "medium")].Add(new Question("family", "medium",
                                    line, reader.ReadLine()));
                            }
                            break;
                        }

                        questions[("family", "easy")].Add(new Question("family", "easy",
                            line, reader.ReadLine()));
                    }
                    break;
                }
            }

        }
        //}
    }

    private async void Button_Clicked(object sender, EventArgs e)
    {
        Random rand = new Random();

        string answer = currentQuestion.spanish;
        if (sender is Button button)
        {
            string buttonText = button.Text;
            if (buttonText != "")
            {
                input = input + buttonText + " ";
                response.Text = input;
            }
        }

        if (input.Equals(answer))
        {
            if (questionsRemaining > 0)
            {
                difficultyToggle();
                answersToggle();
            }

            prompt.Text = "Next!";
            response.Text = "";


            for (int i = 0; i < bank.Children.Count; i++)
            {
                var x = bank.Children[i];
                if (x is Button b)
                {
                    b.Text = "";
                }
            }

            input = "";

            questionsRemaining--;

            if (questionsRemaining == 0)
            {
                prompt.Text = "sussy among us?";
                response.Text = "";
                await DisplayAlert("Congrats!", "Return to the home page and try another category (totally done) or repeat this one!", "OK");
                
                await Navigation.PopAsync();

            }
        }

    }

    public void fillWordbank()
    {
        Random rand = new Random();

        if (difficulty == "easy")
        {
            currentQuestion = questions[(selectedCategory, "easy")][rand.Next(0, questions[(selectedCategory, "easy")].Count())];
        }
        else if (difficulty == "medium")
        {
            currentQuestion = questions[(selectedCategory, "medium")][rand.Next(0, questions[(selectedCategory, "medium")].Count())];
        }
        else if (difficulty == "hard")
        {
            currentQuestion = questions[(selectedCategory, "hard")][rand.Next(0, questions[(selectedCategory, "hard")].Count())];
        }


        string text = "";
        text = currentQuestion.spanish;
        prompt.Text = currentQuestion.english;

        string[] words = text.Split(' ');

        Random random = new Random();
        int n = words.Length;
        for (int i = n - 1; i > 0; i--)
        {
            int j = random.Next(0, i + 1);
            string temp = words[i];
            words[i] = words[j];
            words[j] = temp;
        }


        for (int i = 0; i < words.Length; i++)
        {
            var x = bank.Children[i];
            if(x is Button button)
            {
                button.Text = words[i];
            }
        }



        
    }

    // add space at end of spanish sentences
    private string family_easy_1_spanish = "Mi hermana ";
    private string family_easy_2_spanish = "Mi papá ";
    private string family_easy_3_spanish = "Mi abuela ";

    private string family_medium_1_spanish = "Mi hermana es inteligente ";
    private string family_medium_2_spanish = "Mi papá es simpatico ";
    private string family_medium_3_spanish = "Mi abuela es bonita ";

    private string family_hard_1_spanish = "Mi hermana y yo jugamos juntas en la casa ";
    private string family_hard_2_spanish = "Mi papá me ayuda con la tarea ";
    private string family_hard_3_spanish = "Mi abuela cuenta cuentos antes de dormir ";


    private string family_easy_1_english = "My sister";
    private string family_easy_2_english = "My dad";
    private string family_easy_3_english = "My grandma";

    private string family_medium_1_english = "My sister is smart";
    private string family_medium_2_english = "My dad is nice";
    private string family_medium_3_english = "My grandma is pretty";

    private string family_hard_1_english = "My sister and I play together at home";
    private string family_hard_2_english = "My dad helps me with homework";
    private string family_hard_3_english = "My grandmother tells stories before bedtime";


    private string food_easy_1_spanish = "La pizza ";
    private string food_easy_2_spanish = "La fruta ";
    private string food_easy_3_spanish = "El arroz ";

    private string food_medium_1_spanish = "Me gusta pizza ";
    private string food_medium_2_spanish = "La fruta es fresca ";
    private string food_medium_3_spanish = "Me encanta el helado ";

    private string food_hard_1_spanish = "Me gusta la pizza con queso y pepperoni ";
    private string food_hard_2_spanish = "La fruta es fresca y saludable para merendar ";
    private string food_hard_3_spanish = "El arroz con pollo es mi plato favorito ";

}